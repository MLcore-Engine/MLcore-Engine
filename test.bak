// package main

// import (
// 	"context"
// 	"fmt"

// 	corev1 "k8s.io/api/core/v1"
// 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
// 	"k8s.io/apimachinery/pkg/util/intstr"
// 	"k8s.io/client-go/kubernetes"
// 	"k8s.io/client-go/tools/clientcmd"
// )

// func main() {

// 	kubeconfig := "./services/config"

// 	config, err := clientcmd.BuildConfigFromFlags("", kubeconfig)
// 	if err != nil {
// 		panic(err.Error())
// 	}

// 	clientset, err := kubernetes.NewForConfig(config)
// 	if err != nil {
// 		panic(err.Error())
// 	}

// 	service := &corev1.Service{
// 		ObjectMeta: metav1.ObjectMeta{
// 			Name:      "example-service",
// 			Namespace: "jupyter",
// 			Labels: map[string]string{
// 				"app":      "gaoxin12-4to",
// 				"pod-type": "notebook",
// 				"user":     "gaoxin12_4T",
// 			},
// 		},
// 		Spec: corev1.ServiceSpec{
// 			Type: corev1.ServiceTypeNodePort,
// 			Selector: map[string]string{
// 				"app":      "gaoxin12-4to",
// 				"pod-type": "notebook",
// 				"user":     "gaoxin12_4T",
// 			},
// 			Ports: []corev1.ServicePort{
// 				{
// 					Name:       "http0",
// 					Protocol:   corev1.ProtocolTCP,
// 					Port:       3000,
// 					TargetPort: intstr.FromInt(3000),
// 				},
// 			},
// 		},
// 	}

// 	servicesClient := clientset.CoreV1().Services("jupyter")
// 	result, err := servicesClient.Create(context.TODO(), service, metav1.CreateOptions{})
// 	if err != nil {
// 		panic(err)
// 	}

// 	fmt.Printf("已在命名空间 %q 中创建 Service %q\n", "jupyter", result.GetObjectMeta().GetName())

// 	fmt.Printf("Service Details:\n")
// 	fmt.Printf("Name: %s\n", result.ObjectMeta.Name)
// 	fmt.Printf("Namespace: %s\n", result.ObjectMeta.Namespace)
// 	fmt.Printf("Labels: %v\n", result.ObjectMeta.Labels)
// 	fmt.Printf("Selector: %v\n", result.Spec.Selector)
// 	fmt.Printf("Type: %s\n", result.Spec.Type)
// 	fmt.Printf("Ports:\n")
// 	for _, port := range result.Spec.Ports {
// 		fmt.Printf("- Name: %s\n", port.Name)
// 		fmt.Printf("  Protocol: %s\n", port.Protocol)
// 		fmt.Printf("  Port: %d\n", port.Port)
// 		fmt.Printf("  TargetPort: %s\n", port.TargetPort.String())
// 		fmt.Printf("  NodePort: %d\n", port.NodePort)
// 	}
// }
